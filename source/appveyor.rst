================================
Appveyor による Windows サポート
================================

:Page Status: Incomplete
:Last Reviewed: 2015-12-03

このセクションでは、無料の `Appveyor`_ 継続的インテグレーションサービ
スを使ってプロジェクトの Windows サポートを提供する方法を説明する。こ
れには、Windows 上でのコードのテスト、およびプロジェクトが C 拡張を使
う場合の Windows 用バイナリのビルドが含まれる。

.. contents:: Contents
   :local:


背景
====

多くのプロジェクトはデフォルトでは Unix 上で開発されており、Windows サ
ポートの提供は難しいことがある。というのは、Windows テスト環境を適切に
構築するのは面倒だし、ソフトウェアライセンスの購入が必要かもしれないか
らだ。

Appveyor サービスは継続的インテグレーションサービスで、より有名な
`Travis`_ サービス(`Github`_ でホストされたプロジェクトがよくテストに
使っている)によく似ている。しかし Travis と異なり、Appveyor のビルド
ワーカーは Windows ホストであり、Python 拡張のビルドに必要なコンパイラ
がインストール済みだ。

Windows ユーザは C コンパイラを持っていないのが普通なので、彼らが C 拡
張を使うプロジェクトを ``pip install <dist>`` でインストールするには、
プロジェクト側で配布する PyPI 上のバイナリ wheel に頼ることになる。
Appveyor をビルドサービスとして使うと(テストには使わなくても)、プロ
ジェクトが専用の Windows 環境なしで Windows バイナリを提供できるように
なる。

セットアップ
============

プロジェクトで Appveyor を使って Windows 用 wheels をビルドするには、
サービスのアカウントを作る必要がある。アカウント取得の手順は `Appveyor
ドキュメント <http://www.appveyor.com/docs>`__ にある。オープンソース
プロジェクトなら、無料版アカウントで全く問題ない。

Appveyor には `Github`_ および `Bitbucket`_ との統合機能があるので、プ
ロジェクトがこれら 2 つのサービスのいずれかでホストされているなら、
Appveyor との統合は簡単だ。

Appveyor アカウントを取得してプロジェクトを追加すると、Appveyor はコ
ミットのたびにプロジェクトを自動ビルドするようになる。この動作は
Travis ユーザにはおなじみのものだろう。

プロジェクトに Appveyor サポートを追加する
==========================================

Appveyor がプロジェクトをビルドする方法を定義するには、プロジェクトに
``appveyor.yml`` ファイルを追加する。このファイルの内容の完全な詳細は
Appveyor ドキュメントにある。このガイドでは wheel のビルド設定に必要な
部分を詳しく説明する。

Appveyor にはデフォルトで Python 用拡張のビルドに必要な全てのコンパイ
ラツールチェインが含まれている。これらは Python 2.7, 3.5+ および
32-bit 版の 3.3, 3.4 に対してはそのままで使える。しかし 64-bit 版の
Python 3.3, 3.4 の場合、少々の追加設定を行って distutils に 64-bit コ
ンパイラの場所を知らせる必要がある (3.5 以降では、使用するバージョンの
Visual Studio は追加設定なしで 64-bit コンパイラを含む)。

appveyor.yml
------------

.. literalinclude:: code/appveyor.yml
   :language: yaml
   :linenos:

このファイルは `ここ
<https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/code/appveyor.yml>`__
からダウンロードできる。

``appveyor.yml`` ファイルはプロジェクトのルートディレクトリに置かねば
ならない。これは ``YAML`` 形式で、いくつかのセクションから成る。

``environments`` セクションは作成される wheels に対する Python バー
ジョンを定義する鍵となるものだ。Appveyor には Python 2.6, 2.7, 3.3,
3.4, 3.5 が(全て 32-bit, 64-bit の両方)インストールされている。サンプ
ルファイルでは、Python 2.6 を除く全ての環境用にビルドするよう指定して
いる。Python 2.6 には pip が付属していないので、インストールがより複雑
になる。この文書では 2.6 はサポートしない(まだ Python 2 を使っている
Windows ユーザは、普通大した困難なく Python 2.7 へ移行できるので)。

``install`` セクションでは、pip を使ってプロジェクトに必要な追加ソフト
ウェアをインストールしている。Wheels のビルドに必要なのは ``wheel`` だ
けだが、プロジェクトでこのコードをカスタマイズしたい場合もあるかもしれ
ない(例えば、 ``Cython`` のようなビルドパッケージや、 ``tox`` のような
テストツールを追加でインストールするとき)。

``build`` セクションでは単にビルドをオフにしている - Python にビルドス
テップは必要ない (``C#`` のような言語と違って)。

プロジェクトごとに調整する必要がある主なセクションは ``test_script``
と ``after_test`` だ。

``test_script`` セクションでプロジェクトのテストを実行する。build.cmd
スクリプトが ``setup.py test`` でテストスイートを実行する。Wheels のビ
ルドのみに興味があり、Windows 上でテストを行うつもりがないなら、このセ
クションを ``echo Skipped Tests`` のようなダミーコマンドで置き換えても
よい。テストツールとして ``nose`` や ``py.test`` などを使いたいことも
あるかもしれない。あるいは ``tox`` のようなテストドライバを使いたいこ
ともあるかもしれない - ただし ``tox`` を使う場合、以下で説明するように
いくつか追加の設定変更を考慮する必要があるだろう。

``after_test`` はテスト完了後に一回だけ実行される。つまりここで wheels
がビルドされる。プロジェクトが推奨ツール(特に ``setuptools``) を使って
いれば、 ``setup.py bdist_wheel`` コマンドで wheels がビルドされる。

Wheels はテストが成功した場合のみビルドされることに注意。Windows 上で
はテストが失敗するとわかっているなら、上記のようにテストをスキップでき
る。


サポートスクリプト
------------------

``appveyor.yml`` ファイルは一つのサポートスクリプトに依存している。こ
のスクリプトは 64-bit Python 3.3, 3.4 用に SDK コンパイラを使うための
環境構築を行う。プロジェクトがコンパイラを必要としないか、64-bit
Windows 上の Python 3.3, 3.4 をサポートしないなら、必要なのは
``appveyor.yml`` ファイルだけだ。

`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/code/build.cmd>`__
は Windows バッチスクリプトで、選択した Python バージョンに対して適切
なコンパイラを使う環境で単一のコマンドを実行する。必要なのは環境変数
``DISTUTILS_USE_SDK`` に値 ``1`` を設定することだけで、残りはこのスク
リプトが行う。これは 64-bit Python 3.3, 3.4 に必要な SDK を設定すると
いう意味なので、他の Python ビルドに対してはこの環境変数を設定しないこ
と。

上記のバッチファイルをダウンロードしてプロジェクトにそのまま含めてよ
い。


ビルドされた wheels へのアクセス
--------------------------------

ビルドが完了すると、プロジェクトの Appveyor コントロールパネルからビル
ドされた wheels が取得できる。各ビルドのビルドステータスページを順に辿
ることで見つけられる。ビルド出力の上部にリンクが並んでおり、
"Artifacts" というものがある。そのページには当該 Python バージョン/
アーキテクチャ用の wheels へのリンク一覧がある。これらの wheels をダウ
ンロードし、リリースプロセスの一環として PyPI へアップロードできる。

Additional Notes
================

Tox を用いたテスト
------------------

多くのプロジェクトがテストの実行に `Tox`_ ツールを使っている。これはプ
ロジェクトが配布するのと全く同じファイルを使う隔離環境でテストが実行さ
れることを保証する。

Appveyor で ``tox`` を使うには、いくつか追加の考慮事項がある(実際のと
ころ、これらは Appveyor 固有の問題ではなく、他の CI システムにも影響し
うる)。

1. デフォルトでは、 ``tox`` は環境変数のうち選択されたサブセットのみを
   テストプロセスに渡す。 ``distutils`` は環境変数を使ってコンパイラを
   制御しているので、この「テスト隔離」機能により誤ったコンパイラがデ
   フォルトで使われてしまうことがある。

   ``tox`` が必要な環境変数をサブプロセスに渡すようにするには、
   ``tox`` 構成オプション ``passenv`` を設定し、サブプロセスに渡すべき
   追加の環境変数リストを与える必要がある。SDK コンパイラを使う場合、
   以下を設定する:

        - ``DISTUTILS_USE_SDK``
        - ``MSSdk``
        - ``INCLUDE``
        - ``LIB``

    ``passenv`` オプションは ``tox.ini`` で設定できるが、プロジェクト
    ファイル群に Windows 固有設定を加えるのを避けたければ、
    ``TOX_TESTENV_PASSENV`` 環境変数を設定してもよい。先に示した
    ``build.cmd`` スクリプトは ``DISTUTILS_USE_SDK`` がセットされてい
    ればデフォルトでこれを行う。

2. 対話的に使う場合、 ``tox`` は複数の環境(しばしば複数の Python バー
   ジョンを意味する)に対してテストを実行できる。この機能は Travis や
   Appveyor のような CI 環境ではさほど有用ではない。なぜなら全テストは
   個別の構成に対して隔離環境で実行されるからだ。結果として、プロジェ
   クトはしばしば ``-e ENVNAME`` 引数を ``tox`` に与えて使う環境を指定
   することになる(ほとんどの Python バージョンに対してはデフォルトの環
   境があるので)。

    しかし、この方法は Appveyor のような Windows CI システムではうまく
    *いかない* 。例えば Python 3.4 の環境が 2 つ(32-bit と 64-bit) あ
    るが、 ``tox`` には ``py34`` 環境 1 つしかない、といった場合だ。

    従って、 ``tox`` を使ってテストを実行するには、プロジェクトはおそ
    らく ``tox`` 内ではデフォルトの ``py`` 環境を使うべきだ。この環境
    は ``tox`` の実行に使われたのと同じ Python インタプリタを使う。こ
    れにより、Appveyor がテストを実行する際、設定されたインタプリタで
    実行されることが保証される。

    ``py`` 環境での実行をサポートするために、複雑な ``tox`` 構成を持つ
    プロジェクトは ``tox.ini`` ファイルを修正しなければならない可能性
    がある。しかしこれはこの文書の範囲外だ。

Wheels の自動アップロード
-------------------------

Appveyor が自動で wheels をアップロードするように要求できる。
``appveyor.yml`` には ``deployment`` ステップがあり、例えばビルド結果
を FTP サイトや Amazon S3 インスタンスにコピーしたりできる。これを行う
方法は Appveyor ガイドに含まれている。

代わりに、ビルドに ``twine upload`` ステップを追加することもできる。先
に示した ``appveyor.yml`` ではこれを行っていない。なぜならコミットのた
びに新しい wheels をアップロードするのが望ましいかどうかはわからないか
らだ(プロジェクトによってはそうしたいと思うかもしれないが)。

外部依存関係
------------

先に示したスクリプトは、ビルドの際にサードパーティの外部ライブラリに依
存しない任意の distribution をビルドできる。

``appveyor.yml`` 構成(普通は "install" セクション内)に distribution が
必要とする外部ライブラリをダウンロード/ビルドするステップを加えること
ができる。また、必要ならこれらのライブラリの場所をコンパイラに知らせる
ためのビルド用構成を追加することもできる。しかし、このレベルの構成はこ
の文書の範囲外だ。


サポートスクリプト
------------------

参考までに、SDK 設定用サポートスクリプトを掲載する:

``code/build.cmd``

.. literalinclude:: code/build.cmd
   :language: bat
   :linenos:

.. _Appveyor: http://www.appveyor.com/
.. _Travis: https://travis-ci.org/
.. _Github: https://github.org/
.. _Bitbucket: https://bitbucket.org/
.. _Tox: http://tox.testrun.org
