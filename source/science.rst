.. _`NumPy and the Science Stack`:

============================
科学パッケージのインストール
============================

:Page Status: Incomplete
:Last Reviewed: 2014-07-24

.. contents:: Contents
   :local:


科学ソフトウェアは他のほとんどより複雑な依存関係を持つ傾向がある。それ
にはしばしば複数のビルドオプションがあり、各種ハードウェアを利用した
り、様々な外部ソフトウェアと連携できるようになっている。

特に、 `NumPy <http://www.numpy.org/>`__ は `scientific Python stack
<http://www.scipy.org/stackspec.html#stackspec>`__ のほとんどのソフト
ウェアの基礎をなしているが、これは様々な FORTRAN ライブラリと連携し、
現代の CPU で利用できる様々なレベルのベクトル化命令を利用するように設
定できる。

残念ながら、2013 年 12 月現在、NumPy のビルド/配布モデルのために、標準
ツールはビルド済み NumPy バイナリの配布にはあまり適していない。ほとん
どのユーザはどのバージョンが必要なのか知らないし、今のところ ``wheel``
形式はインストール中にユーザがバージョンを指定できるようにはなっていな
いからだ。

この状況はいずれ解決されるはずだ。標準ツールが将来 NumPy のビルド/配布
プロセスの複雑さを完全にサポートできるようになるか、あるいは NumPy 開
発者が「許容できる公約数」ビルドを選び、それを PyPI 上で wheel として
公開することで。

しかし当面は、いくつかの代替策によって科学 Python ライブラリ(または
ソースからインストールするためのコンパイル環境を要求し、PyPI でビルド
済み wheel を公開していないライブラリ)を入手できる。


ソースからのビルド
------------------

自分でソースからビルドするのは難しい。それは NumPy (と、それに依存する
多くのプロジェクト)を wheel として配布するのと同様に複雑だからだ。しか
し、C および FORTRAN コンパイラ/リンカとの格闘に時間を費やすのを厭わな
いなら、ソースからのビルドは常に選択肢としてある。


Linux 配布パッケージ
--------------------

Linux ユーザの場合、システムパッケージマネージャが様々な科学ソフトウェ
ア(NumPy および scientific Python stack の他の部分を含む)のコンパイル
済みバージョンを用意していることがよくある。

それらのバージョンは数ヶ月単位で古いかもしれないが、それが受け入れられ
るならよい選択肢だろう(仮想環境を使う場合、システムの Python にインス
トールされたパッケージへのアクセスを許可しなければならないことに注意)。


Windows インストーラ
--------------------

現在 wheel を公開していない(できない) Python プロジェクトの多くは、
PyPI またはプロジェクトのダウンロードページで少なくとも Windows インス
トーラは公開している。これらのインストーラを使うことで、ユーザはローカ
ルで拡張をビルドするための環境構築をせずに済む。

これらのインストーラで提供される拡張は、python.org で公開されている
CPython Windows インストーラと互換性があるのが普通だ。

自前で Windows インストーラを提供しない(一部はしているが)プロジェクト
については、カリフォルニア大学の Christoph Gohlke が `Windows インス
トーラコレクション <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`__ を
提供している。Windows 上の Python ユーザの多くがこれらのビルド済みバー
ジョンが役に立ったと報告している。

Linux システムパッケージ同様、Windows インストーラはシステムの Python
環境のみにインストールを行う - 仮想環境へのインストールはサポートしな
い。この制限を回避する一般的な方法は、仮想環境使用時にシステムの
Python にインストールされたパッケージへのアクセスを許可することだ。

`wheel` プロジェクトは、Windows の `bdist_wininst` インストーラを
wheel に変換する `wheel convert` サブコマンドも用意している。

Mac OS X インストーラ/パッケージマネージャ
------------------------------------------

Windows における状況と同様、多くのプロジェクト (NumPy 含む)が Mac OS X
用インストーラを公開しており、それは python.org で公開されている Mac
OS X 用 CPython バイナリと互換性がある。

Mac OS X ユーザは ``MacPorts`` のような Linux スタイルのパッケージマ
ネージャも利用できる。SciPy サイトには、MacPorts による `scientific
Python stack <http://www.scipy.org/install.html#mac-packages>`__ のイ
ンストールに関する詳細がある。


SciPy 配布物
------------

SciPy サイトには、完全な SciPy スタックを利用と更新が容易な形式でエン
ドユーザに提供する `いくつかの配布物
<http://www.scipy.org/install.html>`__ のリストがある。

これらの配布物のいくつかは標準の ``pip``, ``virtualenv`` ベースのツー
ルチェインと互換性がないかもしれない。

Spack
-----

`Spack <https://github.com/LLNL/spack/>`_ は複数のバージョン、構成、プ
ラットフォーム、およびコンパイラをサポートする設計の柔軟なパッケージマ
ネージャだ。大規模スーパーコンピューティングセンターや科学アプリケー
ションチームはしばしばソフトウェアを多くの異なった方法でビルドしなけれ
ばならないが、これはそうした要求をサポートできるように作られた。Spack
は Python に限定されない; ``C``, ``C++``, ``Fortran``, ``R`` その他の
言語向けのパッケージをインストールできる。それは非破壊的だ; あるパッ
ケージの新バージョンをインストールしても、既存のインストール環境は壊れ
ない。よって同じシステム上で多くの構成を共存させられる。

Spack は単純だが強力な構文を提供しており、ユーザはバージョンや構成を簡
潔に指定できる。パッケージファイルは pure Python で書かれており、また
テンプレート化されているため、単一パッケージファイルでコンパイラ、依存
関係の実装(MPI など)、バージョン、およびビルドオプションを簡単に交換で
きる。Spack は *モジュール* ファイルも生成し、パッケージがユーザ環境で
ロード/アンロードできるようにする。


Conda クロスプラットフォームパッケージマネージャ
------------------------------------------------

`Anaconda <https://store.continuum.io/cshop/anaconda/>`__ は Continuum
Analytics が公開している Python ディストリビューションだ。これはビッグ
データと科学的用途のためのオープンソースパッケージの安定したコレクショ
ンだ。Anaconda 2.2 には約 100 のパッケージがインストールされており、ま
た Anaconda リポジトリから合計 279 パッケージがインストールできる。

``conda`` は Anaconda に含まれるオープンソース(BSD ライセンス)のパッ
ケージ管理および環境管理システムだ。これにより、ユーザは複数バージョン
のバイナリソフトウェアパッケージとその依存関係をインストールし、それら
を簡単に切り替えられる。これは Windows, OSX, Linux で動くクロスプラッ
トフォームツールだ。Conda はどんなものでもパッケージ化して配布でき、
それは Python パッケージに限らない。これはネイティブ仮想環境を完全にサ
ポートしている。Conda は環境を first-class として扱うため、C ライブラ
リに対してさえ独立した環境を容易に作れる。これは Python で書かれてはい
るが、Python を意識することはない。Conda は Python 自身をもパッケージ
として扱うため、 `conda update python` が可能だ。これは Python パッ
ケージの管理しか行わない pip とは対照的だ。Conda は Anaconda と
Miniconda (Python と conda のみを含む簡易版)で利用できる。
